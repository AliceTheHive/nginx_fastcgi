CC = g++

RM = /bin/rm -f

INSTALL := install

SOURCE_SUFFIX := cc

CFLAGS += -I./

CXXFLAGS += -g -W -Wall

#定义宏，来控制源程序的编译，源程序中可以使用MY_DEBUG这个宏
CXXFLAGS += -DMY_DEBUG
CXXFLAGS += -DMY_DEFINE=true

VPATH += ./

LIBPATH :=

LDFLAGS := -L./

STATIC_LIBS := 

DYNAMIC_LIBS := -lrt -lpthread

#make DEBUG=1，使用此种方式编译，则此定义不生效，即不使用优化
ifeq ($(DEBUG), )
override CXXFLAGS += -O2
endif

SOURCE_LIST := main

OBJECTS := $(patsubst %,%.o,$(SOURCE_LIST))
DEPS := $(patsubst %,%.d,$(SOURCE_LIST))

TARGET_DIR := ./
TARGET = makefiletest

.PHONY : clean all

all: $(OBJECTS) $(TARGET)

#"$<"表示所有的依赖目标集，即".cc"形式文件
#"$@"表示所有的目标集，即".o"文件
$(OBJECTS):%.o:%.$(SOURCE_SUFFIX)
	$(CC) -c $(CFLAGS) $(CXXFLAGS) $< -o $@

$(TARGET):$(OBJECTS)
	$(CC) $(OBJECTS) -o $(TARGET) $(LDFLAGS) $(LIBS)
#copy二进制文件到指定目录
#	-$(INSTALL) $(TARGET) $(TARGET_DIR)

$(DEPS):%.d: %.$(SOURCE_SUFFIX)
	$(RM) $@; \
	$(CC) -MM $(CXXFLAGS) $< > $@.$$$$; \
	sed 's,/($*/)/.o[ :]*,/1.o $@ : ,g' < $@.$$$$ > $@; \
	$(RM) $@.$$$$

include $(DEPS)

clean:
	@-$(RM) $(OBJECTS) $(TARGET) $(TARGET_DIR)$(TARGET) $(DEPS)
